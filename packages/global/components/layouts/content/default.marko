import { get, getAsArray, getAsObject } from "@parameter1/base-cms-object-path";
import defaultValue from "@parameter1/base-cms-marko-core/utils/default-value";
import getContentPreview from "@parameter1/base-cms-marko-web-theme-monorail/utils/get-content-preview";

import { cmShowOverlay, cmRestrictContentByReg, cmTruncateBody } from "../../../utils/content-meter-helpers";
import shuffle from "../../../utils/shuffle-array";

$ const { site, contentMeterState } = out.global;
$ const idxConfig = site.getAsObject('identityX');
$ const recommendedQuestionId = get(idxConfig, 'options.recommendedQuestionId');

$ const showOverlay = cmShowOverlay(contentMeterState);
$ const { id, type, primarySection, pageNode, showReadNextBlock, showBottomAdBlock, showTopStoryBlock, ...rest } = input;
$ const sections = getAsArray(input, "sections");
$ const belowContentSections = getAsArray(input, "belowContentSections");

$ const displayPrimaryImage = defaultValue(input.displayPrimaryImage, false);
$ const displayPublishedDate = ["company", "contact", "whitepaper"].includes(type) ? false : true;
$ const displayReadNext = showReadNextBlock && ["article"].includes(type);
$ const displaySocialShare = ["contact"].includes(type) ? false : true;
$ const displayComments = ["contact"].includes(type) ? false : true;
$ const displayNewsletterSignup = ["contact"].includes(type) || showOverlay ? false : true;
$ const shouldInjectAds = ["article", "video", "news", "podcast"].includes(type);
$ const excludeFromSidebarsLabel = ["Scholar Profile"];
$ const isOnTheMoveSection = new Set([83113]).has(primarySection.id);
$ const withRecommended = defaultValue(input.withRecommended, true);

<global-content-wrapper-layout
  id=id
  type=type
  page-node=pageNode
  ...rest
>
  <@section|{ aliases }| modifiers=["first-sm"]>
    <if(!showOverlay)>
      <theme-gam-define-display-ad
        name="leaderboard"
        position="content_page"
        aliases=aliases
        modifiers=["inter-block"]
      />
    </if>
  </@section>

  <@section|{ blockName, content, aliases }| modifiers=["content-header"]>
    $ const { primarySection } = content;
    <div class="content-page-header" role="region" aria-label="Content Information">
      <theme-content-page-breadcrumbs section=primarySection />
      <marko-web-content-name tag="h1" block-name=blockName obj=content />

      $ const contentContactLength = ["authors", "contributors", "photographers"].reduce((num, field) => {
        const contacts = getAsArray(content, `${field}.edges`);
        return num + contacts.length;
      }, 0);

      $ const authors = getAsArray(content, "authors.edges");

      <if(type !== "contact")>
        <if(authors.length === 1 && contentContactLength < 2)>
          <theme-author-published-node author=authors[0].node content=content display-updated-date=false />
        </if>
        <else>
          <theme-content-attribution obj=content elements=["authors"] />
        </else>
      </if>

      <if(authors.length !== 1 || contentContactLength > 1)>
        <theme-page-dates|{ blockName }|>
          <if(type === "event")>
            <marko-web-content-starts block-name=blockName obj=content />
            <marko-web-content-ends block-name=blockName obj=content />
          </if>
          <else-if(type === "webinar")>
            <marko-web-content-starts block-name=blockName obj=content />
          </else-if>
          <else-if(displayPublishedDate)>
            <theme-content-published-node block-name=blockName obj=content display-updated-date=false />
          </else-if>
        </theme-page-dates>
      </if>
      <global-sponsored-section-logo alias=primarySection.alias modifiers=["content-page"] class="mt-3" />
    </div>
  </@section>

  <@section|{ aliases, content }|>
    $ const { primarySection } = content;
    <div class="row">
      <div class="col-lg-8">
        <div class="content-page-body" role="region" aria-label="Content Body">
          <theme-page-contents|{ blockName }| attrs={ "data-gallery-id": id }>
            <if(displaySocialShare)>
              <marko-web-social-sharing
                path=content.siteContext.path
                providers=["print", "facebook", "linkedin", "twitter", "pinterest"]
                print-path=`/print/content/${content.id}`
              />
            </if>
            <if(content.embedCode)>
              <marko-web-content-embed-code block-name=blockName obj=content />
            </if>
            <else-if(type === "media-gallery")>
              <!-- <marko-web-image-slider images=images /> -->
            </else-if>
            <else-if(type === "document")>
              <theme-primary-image-block
                obj=content.primaryImage
                force-display="right"
              />
            </else-if>
            <else-if(displayPrimaryImage)>
              $ let forceDisplay;
              $ if (type === "contact") forceDisplay = "left";
              $ if (type === "video") forceDisplay = "none";
              <theme-primary-image-block
                obj=content.primaryImage
                force-display=forceDisplay
              />
            </else-if>

            <if(content.transcript)>
              <marko-web-link href=`#transcript-${id}` class="btn btn-transcript mt-block mb-2" title="Transcript">
                <marko-web-icon name="file" modifiers=["lg"] /> Transcript
              </marko-web-link>
            </if>

            $ const contentRequiresRegistration = get(content, "userRegistration.isCurrentlyRequired");
            $ const requiresRegistration = contentRequiresRegistration || cmRestrictContentByReg(contentMeterState, content);
            $ const accessLevels = getAsArray(content, "userRegistration.accessLevels");

            <marko-web-identity-x-access|context|
              enabled=requiresRegistration
              required-access-level-ids=accessLevels
            >
              $ const lazyloadFirstImage = displayPrimaryImage && content.primaryImage;
              $ const bodyModifiers = isOnTheMoveSection ? ['on-the-move'] : []
              <if(cmTruncateBody(contentMeterState))>
                $ const body = showOverlay ? getContentPreview({ body: content.body, selector: "p:lt(7)" }) : getContentPreview({ body: content.body, selector: "p:nth-of-type(1)" });
                <marko-web-content-body block-name=blockName modifiers=bodyModifiers obj={ body } lazyload-first-image=lazyloadFirstImage />

                <div class="content-page-preview-overlay" />
                <if(!showOverlay)>
                  <theme-content-page-gate
                    can-access=context.canAccess
                    is-logged-in=context.isLoggedIn
                    has-required-access-level=context.hasRequiredAccessLevel
                    requires-access-level=context.requiresAccessLevel
                    requires-user-input=context.requiresUserInput
                    messages=context.messages
                    user-input-title="Step 2 of 2"
                    profile-call-to-action=""
                    profile-button-label="Create Account"
                    profile-event-name="content_meter_profile"
                  />
                </if>
              </if>
              <else-if(!context.canAccess || context.requiresUserInput)>
                $ const body = getContentPreview({ body: content.body, selector: "p:nth-of-type(1)" });
                <marko-web-content-body block-name=blockName modifiers=bodyModifiers obj={ body } lazyload-first-image=lazyloadFirstImage />

                <div class="content-page-preview-overlay" />
                <theme-content-page-gate
                  can-access=context.canAccess
                  is-logged-in=context.isLoggedIn
                  has-required-access-level=context.hasRequiredAccessLevel
                  requires-access-level=context.requiresAccessLevel
                  requires-user-input=context.requiresUserInput
                  messages=context.messages
                />
                <marko-web-content-body block-name=blockName modifiers=bodyModifiers attrs={ style: "display: none;" }  obj=content modifiers=["ld-json"] />
              </else-if>
              <else>
                <theme-body-with-injection
                  content=content
                  aliases=aliases
                  block-name=blockName
                  preventHTMLInjection=!shouldInjectAds
                  lazyload-first-image=lazyloadFirstImage
                  modifiers=bodyModifiers
                />
                <if(content.transcript)>
                  <div id=`transcript-${id}` class="page-contents__content-transcript">
                    <marko-web-element block-name="page-contents" name="content-transcript-title">
                      <marko-web-icon name="file" modifiers=["lg"] /> Transcript
                    </marko-web-element>
                    <theme-body-with-injection
                      content={ body: content.transcript }
                      aliases=aliases
                      block-name=blockName
                      preventHTMLInjection=!shouldInjectAds
                    />
                  </div>
                </if>

                <!-- needs input -->
                <if(input.afterBody)>
                  <${input.afterBody}
                    aliases=aliases
                    block-name=blockName
                    content=content
                  />
                </if>

                $ const profiles = getAsArray(content, 'profiles');
                <for|profile| of=profiles>
                  <marko-web-block class="page-contents__content-profile" tag=null>
                    $!{profile.body}
                  </marko-web-block>
                </for>

                <if(isOnTheMoveSection)>
                  <marko-web-block>
                    <div class="social-sharing" align="center">
                      <a class="btn btn-primary" target="_blank" href="https://responses.diverseeducation.com/OnTheMove2021">
                        Submit Your Professional Appointment
                      </a>
                    </div>
                  </marko-web-block>
                </if>

                $ const sidebars = getAsArray(content, "sidebars").map((sidebar) => sidebar.body);
                <marko-web-content-sidebars block-name=blockName obj={ sidebars } />

                <if(type === "document" || type === "whitepaper")>
                  <theme-content-download obj=content>
                    <@wufoo user-name=site.get("wufoo.userName") />
                    <@link class="btn btn-primary" />
                  </theme-content-download>
                </if>

                <if(displayReadNext)>
                  <theme-read-next-block
                    content-id=id
                    section-id=primarySection.id
                    published=content.published
                  />
                </if>

                <if(displayNewsletterSignup)>
                  <marko-web-identity-x-context|{ hasUser }|>
                    <if(!hasUser)>
                      <identity-x-newsletter-form-inline type="inlineContent" />
                    </if>
                  </marko-web-identity-x-context>
                </if>

                <if(displaySocialShare)>
                  <marko-web-social-sharing
                    path=content.siteContext.path
                    providers=["print", "facebook", "linkedin", "twitter", "pinterest"]
                    print-path=`/print/content/${content.id}`
                  />
                </if>
              </else>
            </marko-web-identity-x-access>
          </theme-page-contents>
        </div>
      </div>
      <div class="col-lg-4 page-rail">
        <if(withRecommended)>
          <div class="sticky-top">
            <global-recommended-content-block query-params={ excludeContentIds: [content.id], sectionId: primarySection.id } aliases=aliases />
          </div>
        </if>
      </div>
    </div>
  </@section>

  <if(showBottomAdBlock)>
    <@section|{ aliases }|>
      <if(!showOverlay)>
        <theme-gam-define-display-ad
          name="rotation"
          position="content_page"
          aliases=aliases
          modifiers=["inter-block"]
        />
      </if>
    </@section>
  </if>

  <@section|{ content }|>
    <theme-related-stories-block
      content-id=content.id
      section-id=content.primarySection.id
      with-native-x=true
    />
  </@section>

  <!-- <@section|{ content, aliases }|>
    <global-section-feed-wrapper aliases=aliases alias=content.primarySection.alias ad-name="rotation">
      <@header>More in ${content.primarySection.name}</@header>
      <@query-params excludeContentIds=[content.id] />
      <@native-x index=[1] name="default" aliases=aliases sectionName="Sponsored" />
      <@rail>
        <div class="sticky-top">
          <theme-gam-define-display-ad
            name="rail"
            position="section_page"
            aliases=input.aliases
            modifiers=[]
          />
        </div>
      </@rail>
      <@rail>
        <theme-client-side-most-popular-list-block class="sticky-top" />
      </@rail>
    </global-section-feed-wrapper>
  </@section> -->

  <for|s| of=sections>
    <@section|{ blockName, content, aliases }| modifiers=s.modifiers>
      <${s.renderBody}
        block-name=blockName
        content=content
        aliases=aliases
      />
    </@section>
  </for>
  <@section|{ aliases }|>
    <if(!showOverlay)>
      <theme-gam-define-display-ad
        name="rotation"
        position="content_page"
        aliases=aliases
        modifiers=["inter-block"]
      />
    </if>
  </@section>
</global-content-wrapper-layout>
